rules_version = '2'
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authorized
    function isAuthorized() {
      return request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid))
    }

    // Function to check if user has a Google account
    function userHasGoogleAccount() {
      return isAuthorized() &&
        request.auth.token.email_verified &&
        request.auth.token.email.matches('@google.com*')
    }

    // Function to check if user is an admin
    function isAdmin() {
      return isAuthorized() &&
        request.auth.token.admin
    }

    // For development use
    match /{unrestrictedAccessRemoveInProduction=**} {
      allow read, write: if userHasGoogleAccount() && request.auth.token.allAccess
    }

  	// Group Match 
  	match /groups/{groupId} {
      // Group Functions
      function isGroupMember() {
        return request.auth.uid in get(/databases/$(database)/documents/accounts/$(accountId)).data.members
      }

      // Group Rules
			allow read: if isAuthorized()
      allow write: if isAdmin()

      // Group Messages Rules
      match /messages/{messageId} {
      	allow read: if isGroupMember()
      }
    }

    // Profiles Match
    match /profiles/{memberId} {
      allow read: if isAuthorized()
    }

    // Member Match
    match /members/{memberId} {
      allow read: if (request.auth.uid == memberId)
      
      // Member Messages Match
      match /messages/{messageId} {
        allow read: if (request.auth.uid == memberId)
      }      
    }    
  }
}