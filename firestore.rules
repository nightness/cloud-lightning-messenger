rules_version = '2'
service cloud.firestore {
  	match /databases/{database}/documents {
    	// Function to check if user is authorized
    	function isAuthorized() {
      		return request.auth.uid != null &&
        		exists(/databases/$(database)/documents/profiles/$(request.auth.uid))
    	}

    	function isEmailVerified() {
      		return request.auth.token.email_verified
    	}

		function emailMatches(regex) {
			return request.auth.token.email.matches(regex)
		}

    	// Function to check if user has a Google account
    	function userHasGoogleAccount() {
      		return isAuthorized() &&
        		isEmailVerified() &&
        		emailMatches('@google.com*')
    	}

    	// Function to check if user is an admin
    	function isAdmin() {
      		return isAuthorized() && isEmailVerified() && request.auth.token.admin
    	}

    	// For development use
    	match /{unrestrictedAccessRemoveInProduction=**} {
      		allow read, write: if userHasGoogleAccount() && request.auth.token.allAccess
    	}

		// General Documents
    	match /public/{publicDoc=**} {
      		allow read: if isAuthorized()
    	}

  		// Group Match 
  		match /groups/{groupId} {
      		// Group Functions
      		function isGroupMember() {
        		return request.auth.uid in get(/databases/$(database)/documents/groups/{groupId}).data.members
      		}

      		// Group Messages Rules
      		match /messages/loading {
      			allow read: if isAuthorized()
      		}

		    // Group Rules
			allow read: if isAuthorized()

      		// Group Messages Rules
      		match /messages/{messageId} {
      			allow read: if isGroupMember() || isAuthorized()
      		}
    	}

    	// Profiles Match
    	match /profiles/{memberId} {
      		allow read: if isAuthorized()
    	}

    	// Member Match
    	match /members/{memberId} {
      		allow write: if (request.auth.uid == memberId)
      		allow read: if isAuthorized()
      
			// Member Messages Match
      		match /messages/{messageId} {
        		allow write: if isAuthorized() && (request.resource.data.authorUID == request.auth.uid) && (request.resource.data.authorUID == resource.data.authorUID)
        		allow read: if isAuthorized() && ((request.auth.uid == memberId) || (resource.data.authorUID == request.auth.uid))
      		}      
    	}

		// Messages Match
    	match /messages/{memberId} {			
			allow read, write: if isAuthorized() && (request.auth.uid == memberId)
      
    		match /{document=**} {
      			allow read, write: if isAuthorized() && ((request.auth.uid == memberId) || (request.resource.data.authorUID == request.auth.uid))
    		}	  			
    	}    

		// Walls Match
    	match /walls/{memberId} {
      		allow write: if isAuthorized() && (request.auth.uid == memberId)
      		allow read: if isAuthorized()
      
			// Wall Messages Match
      		match /messages/{messageId} {
        		allow create: if isAuthorized()
				allow update: if (request.resource.data.authorUID == resource.data.authorUID)
        		allow read: if isAuthorized()
      		}      
    	}  
  	}
}